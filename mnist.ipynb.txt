{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recognizing hand-written digits with neural networks\n",
    "\n",
    "**Neural network Python libraries**\n",
    "- *Keras*: High level library based on Tensorflow (or others) that is easy to use and flexible enough for most standard users. It has a great documentation and online support. \n",
    "- *Tensorflow*: Google's neural network library. Most widely used in ML research. Flexible and powerful but also (unnecessarily?) complicated.\n",
    "- *Pytorch*: The newcomer developed by Facebook. Flexible like Tensorflow but with a nicer, more Pythonic API.\n",
    "\n",
    "In this notebook we will tackle a classification task, recognizing hand-written digits of the famous MNIST dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from tensorflow import keras\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.optimizers import SGD, Adam\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MNIST - Preparing and exploring the data\n",
    "\n",
    "Keras has a handy function to download the entire MNIST dataset which consists of 60,000 training images and 10000 test images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "11490434/11490434 [==============================] - 2s 0us/step\n"
     ]
    }
   ],
   "source": [
    "(x_trn, y_trn), (x_test, y_test) = keras.datasets.mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((60000, 28, 28), (60000,), (10000, 28, 28), (10000,))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_trn.shape, y_trn.shape, x_test.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**STOP!** What are training, validation and test sets?\n",
    "\n",
    "- Training set: Data used to optimize the machine learning algorithm\n",
    "- Validation set: Data used to independently verify the skill of the algorithm\n",
    "- Test set: Another independent set used for *final* verification.\n",
    "\n",
    "Let's make a validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set a random seed to make train/valid split reproducible\n",
    "np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_trn, x_val, y_trn, y_val = train_test_split(x_trn, y_trn, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((48000, 28, 28), (12000, 28, 28))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_trn.shape, x_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plots(xs, ys):\n",
    "    nfigs = xs.shape[0]; ncols = min(3, nfigs); nrows = int(np.floor(nfigs / ncols))\n",
    "    fig, axs = plt.subplots(nrows, ncols, figsize=(3*ncols, 3*nrows))\n",
    "    for i, ax in enumerate(axs.flat):\n",
    "        ax.imshow(xs[i], cmap='gray')\n",
    "        ax.set_title(str(ys[i]))\n",
    "        ax.set_xticks([]); ax.set_yticks([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x900 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plots(x_trn[:9], y_trn[:9])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For gradient descent to work efficiently it is important that all the input variables or features are roughly on the same order of magnitude. Typically, we try to get them around 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(x): return x / 255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_trn = normalize(x_trn)\n",
    "x_val = normalize(x_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.99215686, 0.99215686, 0.76862745],\n",
       "       [0.85098039, 0.98431373, 0.99215686],\n",
       "       [0.        , 0.20784314, 0.9254902 ]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_trn[0, 12:15, 12:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_trn[0, 12:15, 12:15], cmap='gray');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will do something pretty dumb. We will flatten out the images and throw away all spatial information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flatten(x): return x.reshape(x.shape[0], -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_trn = flatten(x_trn)\n",
    "x_val = flatten(x_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(48000, 784)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_trn.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAHoUAAAA7CAYAAACpmqb0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAdbUlEQVR4nO3df5BV5X0/8PcF3BUNLAJZkKqIjVoViQoOLEaTRiUhaupkxpgmoTD+qLaYlhKnCXU6JRolqY0haUY6mNT4Iy1OVYzWn2Qa0EhJkMpoSEpNxQC6G6IiApJdhO0fafbb/YrwsHtvdmVfr5k74z3nfc99Dt597vmc85z7VNrb29sDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAXvXr6QYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8E5gUGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoIBJoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqYFBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCASaEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKmBQaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACggEmhAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpgUGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoIBJoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqYFBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBAzSaF3rx5c6ZNm5aGhoY0NDRk2rRpee211/b6mhkzZqRSqXR6TJo0qVZNBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKDagVhv+5Cc/mY0bN+aRRx5JkvzxH/9xpk2blgceeGCvr/vwhz+cW2+9teN5XV1drZoIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQrCaTQv/0pz/NI488khUrVmTixIlJkltuuSVNTU1Zu3Ztjj/++Ld9bX19fUaOHFmLZgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRZTSaF/vd///c0NDR0TAidJJMmTUpDQ0OWL1++10mhly5dmsbGxgwZMiTvf//7c/3116exsfFt862trWltbe14vnv37rz66qsZNmxYKpVKdXYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ILW3t2fr1q0ZNWpU+vXrt9dsTSaFbmlp2eNEzo2NjWlpaXnb102dOjUXXXRRRo8enXXr1uWv//qv88EPfjCrVq1KfX39Hl8zb968fOELX6ha2wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL5nw4YNOeKII/aa2a9JoefOnbvPCZhXrlyZJKlUKkmSm2++OTfeeGOam5uTJC+88MLbvvbiiy/OsmXLMn369KxZsyYjRozIxo0b8+CDD+ZjH/vYHl8zZ86czJ49u+P5li1bctRRR+3PbgEAAAAAAOy3IUOGFOX2dbHmQPLqq68W5V566aUat4RSgwYNKsqNGzdun5knn3yyu83pksmTJxflPvzhDxflJk2a1J3mdMmwYcOKcsccc0yNW9K7bNq0qSh3/PHH17gllLjpppuKckOHDi3KzZgxoyg3YcKEotw///M/F+UOO+ywolz//v2Lcr/85S+Lclu3bi3K9SX/8i//UpQ79dRT95l55plnirZ1/fXXF+XouksuuaQod+ONNxblHnjggaLc/x1btDc/+tGPinKl392rVq0qyv393//9PjM//OEPi7bV0tJSlIPebMCAsmGNS5YsKcqdcsopRblFixYV5WbOnFmUKz1vUGLbtm1Fuba2tqq9JxwoSs8HlNYMvxkPvS9nnnlmUe6VV14pygG9w1e+8pWiXGnt8+abb+4zU9rvlNq4cWNRrnRfH3/88aLczp07i3LQl3zuc5/bZ+bzn//8b6ElvUfp+Y/HHnusKFd63hre6err64tyDz/8cFHujTfeKMr9+Mc/LsqVOvfcc4tyRx99dFGuX79+3WhNZ9/97neLcpdeemlRbteuXd1pDlAlJdcZk+Tee+8tylXznHCS/OxnPyvKTZw4sSi3e/fu7jQHqJLSY5kvf/nLRbkpU6Z0ozVdf98vfelLVX1foLZ+8/s/+3LdddcV5Uqumb/22mtF2zr77LOLcs8//3xRDkqVjMn2ueu6d73rXUW573//+0W597znPUW58847ryi3fPnyohyUKB2zOXXq1KLc008/3Z3m9Gml52f/7u/+riinT6EnlB5Hn3POOUW5p556qhut6dumTZtWlPv6179elNOn0BO2bNlSlDv//POLck888UR3mnNAGjNmTFHu7rvvLsqV1Kr6E3rKT37yk6JcybjYhQsXFm3rO9/5TlFu8+bNRblSpfc0ve997yvKnXjiiUW5K664oihX8pvr27dvL9rWhz70oaLcmjVrinJQ4thjjy3KlY7VKP09n9Ix+b/61a+KcqVKr9GUXkeuppI+O0k+/elPF+UeffTR7jQHaqr02P2qq64qyp111llFudLrGz2h9Pc3Su9B+upXv1qUc74K3qqhoaEo15t/x7B0vGtra2uNWwIAAAC1U/Ib7vs1KfRVV12VT3ziE3vNHH300XnmmWfyi1/8InfddVdmzZqVm2++OWeccUZOOeWU3Hbbbbnmmmv2eBFx3bp1+chHPpLLL788d955Z5588slcfvnluffee992Uuj6+vriHy4AAAAAAAColtKbL0onjTwQVPNHlfntKP0cl97A2BNK23bwwQcX5Q499NDuNKdLSn/4avDgwTVuSe+yY8eOnm4C+2HgwIFFuUMOOaSq71vaB5QMoEjK/85Kv99Lb/5sb28vyvUlpf12yWeqdFvUXl1dXVGu9G+xtE8pPU6tdl9Relxx0EEH7TPjWJu+pLROqfZxdOnxTGn7qvl3W/qewFuVfM8m5X1F6STtvrvhwFR6vFDap5T8kFJpv1OqtE4pPefiOAW6ruReqL52XaC0j3IfGXRW7XMppdur9rn3ap/rqWZdVnou2rERvLOUXvOt9vWjUtXut4HeofQYpfT4o9p9j/EVcGCqdp1X0vfs2rWraFuuqdFTfPZqq6fG/vTmex44cFV77DldV+0xyvoUeoLPZ++hT+FA4PNZe6W1ZTVrH/+/6Cml10xLxsWWjv3qqeug1f7thdL9reZ16dIaVK1KT+ipsRqlY/Kr/V1berzQE+OFSyeFLr0vC3qz0r/F0nuGDoTfCCrdh9LxK2oV6LoD4XcMjWMFAACgLyipf/frLNnw4cMzfPjwfeaampqyZcuWXHfddbn00ktz2WWX5Yc//GHa2tpyzDHHZMGCBZk3b95bXvcP//APOeqoozJ//vwkSWNjY6644oqsWLFif5oJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQdf1qsdETTjghU6ZMyZo1azJ69OisWLEil19+ec4///ycf/75Wb58eZLk937v97J48eIkybZt2/Kd73wnJ598cl544YUsXbo0F1xwQYYMGZKf//zn2blz5x7fq7W1Na+//nqnBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQLXVZFLoJLnpppuSJNddd12mTJmScePG5Y477siIESPS0tKSJFm7dm22bNmSJOnfv382b96cBx98MMcdd1ymT5+e4447Lt/85jfz5ptv5uWXX97j+8ybNy8NDQ0djyOPPLJWuwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPRhNZsU+rDDDkuS/Mmf/EmGDRuWu+++O2effXbWrVuXSqWSJGlvb8+MGTOSJAMHDsxhhx2WN954Izt37sz69etz22235WMf+1iSdLzm/zdnzpxs2bKl47Fhw4Za7RIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCH1WxS6OHDh6dSqeRrX/tarrnmmjz99NM588wzc9ttt6WhoWGPrxk6dGiSZO3atWlubk5zc3O+9a1vpX///hk2bNgeX1NfX5/Bgwd3egAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRbzSaFrquryyGHHJLjjjsul112WU444YTMnz8/lUol/frt+W1POumkJEljY2NGjhyZkSNHZuXKlTn99NNz0EEH1aqpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+zSgVhtua2vLjh07snbt2vzjP/5jmpqasnDhwuzevTu7d+9OksyZMycvvvhibr/99iTJRz/60SxatCijR49OXV1dhg8fnueeey533XXX275Pa2trWltbO55v2bKlVrsEAAAAAADQob29vSi3a9euGrek9/jNNSDeOUo/x2+++WaNW9J1pW371a9+VZTbvn17d5rTJQcffHBR7vXXX69xS3qXrVu39nQT2A87duwoyr3xxhtVfd/SPqD08zRgQNkwiv79+1f1fbdt21aU60tK++2Sz1Tptqi9tra2olzpd15pn1J6nFr6N1tXV1eUKz2u2Llz5z4zjrXpS0rrlNLvz9I+pfR4prR91fy7LX1P4K1KvmeT8r6i9HjBdzccmEqPF0r7lJLzGtU+R1Zap5Sec3GcAl33f++Fejt97bpAaR9V8m8HfUm1z6WUnnet9rn3ap/r6devX3ea00npv4ljI3hn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mhtvvDGXXHKJehsAAAC6Ydu2bTnttNNy880354tf/GJOOeWUzJ8/3zVuAAAA6KK5c+fmvvvuy+rVq9+yTr0NAAAAXfP5z38+Tz75ZJ544ok9rldzAwAAQHXMmjUr//qv/5rnnnsuSdTbAAAASfr1dANqqa2tLatWrcqUKVM6LZ8yZUqWL1/eQ60CAACAd65169alpaWlU61dX1+f97///R219qpVq7Jz585OmVGjRmXs2LHqcQAAAPhfW7ZsSfLrSaoSNTcAAABUw65du7Jo0aJs3749TU1N6m0AAADoppkzZ+a8887LOeec02m5mhsAAAC67rnnnsuoUaMyZsyYfOITn8jzzz+fRL0NAAAAXXX//fdnwoQJueiii9LY2JhTTz01t9xyS8d6NTcAAAB0X1tbW+68885ccsklqVQq6m0AAID/dUBPCv3yyy9n165dGTFiRKflI0aMSEtLSw+1CgAAAN65flNP763WbmlpSV1dXQ477LC3zQAAAEBf1t7entmzZ+d973tfxo4dm0TNDQAAAN3x7LPP5l3velfq6+tz5ZVXZvHixTnxxBPV2wAAANANixYtyn/8x39k3rx5b1mn5gYAAICumThxYm6//fY8+uijueWWW9LS0pLJkyfnlVdeUW8DAABAFz3//PNZsGBBjj322Dz66KO58sor82d/9me5/fbbk7jGDQAAANVw33335bXXXsuMGTOSqLcBAAB+Y0BPN+C3oVKpdHre3t7+lmUAAABAua7U2upxAAAA+LWrrroqzzzzTH7wgx+8ZZ2aGwAAAPbf8ccfn9WrV+e1117LPffck+nTp2fZsmUd69XbAAAAsH82bNiQP//zP89jjz2Wgw8++G1zam4AAADYP1OnTu3475NPPjlNTU353d/93dx2222ZNGlSEvU2AAAA7K/du3dnwoQJueGGG5Ikp556atasWZMFCxbkj/7ojzpyam4AAADoum9961uZOnVqRo0a1Wm5ehsAAOjr+vV0A2pp+PDh6d+/f1paWjot37RpU0aMGNFDrQIAAIB3rpEjRybJXmvtkSNHpq2tLZs3b37bDAAAAPRVn/nMZ3L//ffn+9//fo444oiO5WpuAAAA6Lq6urq85z3vyYQJEzJv3ry8973vzde+9jX1NgAAAHTRqlWrsmnTpowfPz4DBgzIgAEDsmzZsnz961/PgAEDOmpmNTcAAAB0z6GHHpqTTz45zz33nGvcAAAA0EWHH354TjzxxE7LTjjhhKxfvz6J+7gBAACgu37+85/ne9/7Xi677LKOZeptAACAXzugJ4Wuq6vL+PHjs2TJkk7LlyxZksmTJ/dQqwAAAOCda8yYMRk5cmSnWrutrS3Lli3rqLXHjx+fgw46qFOmubk5P/7xj9XjAAAA9Fnt7e256qqrcu+99+bf/u3fMmbMmE7r1dwAAABQPe3t7WltbVVvAwAAQBedffbZefbZZ7N69eqOx4QJE/KpT30qq1evzjHHHKPmBgAAgCpobW3NT3/60xx++OGucQMAAEAXnXHGGVm7dm2nZf/1X/+V0aNHJ3EfNwAAAHTXrbfemsbGxpx33nkdy9TbAAAAvzagpxtQa7Nnz860adMyYcKENDU1ZeHChVm/fn2uvPLKnm4aAAAA9Erbtm3Lz372s47n69aty+rVqzN06NAcddRRmTVrVm644YYce+yxOfbYY3PDDTfkkEMOySc/+ckkSUNDQy699NJ89rOfzbBhwzJ06NBcffXVOfnkk3POOef01G4BAABAj5o5c2b+6Z/+Kd/97nczaNCgtLS0JPl1HT1w4MBUKhU1NwAAAHTBX/3VX2Xq1Kk58sgjs3Xr1ixatChLly7NI488ot4GAACALho0aFDGjh3badmhhx6aYcOGdSxXcwMAAMD+u/rqq3PBBRfkqKOOyqZNm/LFL34xr7/+eqZPn+4aNwAAAHTRX/zFX2Ty5Mm54YYb8vGPfzw/+tGPsnDhwixcuDBJ1NwAAADQDbt3786tt96a6dOnZ8CA/zfVmXobAADg1w74SaEvvvjivPLKK7n22mvT3NycsWPH5qGHHsro0aN7umkAAADQKz311FP5/d///Y7ns2fPTpJMnz493/72t/OXf/mX2bFjR/70T/80mzdvzsSJE/PYY49l0KBBHa/56le/mgEDBuTjH/94duzYkbPPPjvf/va3079//9/6/gAAAEBvsGDBgiTJBz7wgU7Lb7311syYMSNJ1NwAAADQBb/4xS8ybdq0NDc3p6GhIePGjcsjjzySc889N4l6GwAAAGpFzQ0AAAD7b+PGjfnDP/zDvPzyy3n3u9+dSZMmZcWKFR2/iabeBgAAgP13+umnZ/HixZkzZ06uvfbajBkzJvPnz8+nPvWpjoyaGwAAALrme9/7XtavX59LLrnkLevU2wAAAEmlvb29vacbAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0Nv16+kGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvBOYFBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCASaEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKmBQaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACggEmhAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpgUGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoIBJoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqYFBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCASaEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKmBQaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACggEmhAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpgUGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoMD/ALiQX/sJkMtIAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 10000x100 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(100, 1))\n",
    "plt.imshow(x_trn[0, None, :], cmap='gray');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are dealing with a classification problem. That means that the correct answer to always one of 10 classes. To pass the numbers to the neural net we one-hot encode the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "yoh_trn = to_categorical(y_trn)\n",
    "yoh_val = to_categorical(y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([5, 0, 1], dtype=uint8),\n",
       " array([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
       "        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32))"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_trn[:3], yoh_trn[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training a simple linear network\n",
    "\n",
    "To start, let's train a simple linear network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-21 15:31:37.379255: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "linear_model = Sequential([\n",
    "    Dense(10, input_shape=(784,), activation='softmax'),\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the matrix multiplication we are using a Softmax layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def softmax(x):\n",
    "    np.exp(x) / np.sum(np.exp(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [2, 6, 3, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  7.3890561 , 403.42879349,  20.08553692, 148.4131591 ])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.01275478, 0.69638749, 0.03467109, 0.25618664]), 1.0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out = np.exp(x) / np.sum(np.exp(x))\n",
    "out, out.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we need to judge how good our predictions is. For classification we use the categorical crossentropy:\n",
    "\n",
    "$L = - \\sum_c y_t^c \\log(y_p^c)$\n",
    "\n",
    "$c$ is the class, so one of our ten numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_model.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense (Dense)               (None, 10)                7850      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 7,850\n",
      "Trainable params: 7,850\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "linear_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "94/94 [==============================] - 0s 3ms/step - loss: 1.2841 - accuracy: 0.6735 - val_loss: 0.7472 - val_accuracy: 0.8315\n",
      "Epoch 2/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.6158 - accuracy: 0.8563 - val_loss: 0.5290 - val_accuracy: 0.8695\n",
      "Epoch 3/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.4825 - accuracy: 0.8791 - val_loss: 0.4460 - val_accuracy: 0.8860\n",
      "Epoch 4/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.4220 - accuracy: 0.8903 - val_loss: 0.4020 - val_accuracy: 0.8951\n",
      "Epoch 5/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3867 - accuracy: 0.8976 - val_loss: 0.3734 - val_accuracy: 0.9038\n",
      "Epoch 6/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3632 - accuracy: 0.9030 - val_loss: 0.3541 - val_accuracy: 0.9078\n",
      "Epoch 7/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3462 - accuracy: 0.9061 - val_loss: 0.3404 - val_accuracy: 0.9106\n",
      "Epoch 8/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3337 - accuracy: 0.9091 - val_loss: 0.3313 - val_accuracy: 0.9134\n",
      "Epoch 9/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3234 - accuracy: 0.9113 - val_loss: 0.3216 - val_accuracy: 0.9138\n",
      "Epoch 10/10\n",
      "94/94 [==============================] - 0s 2ms/step - loss: 0.3148 - accuracy: 0.9134 - val_loss: 0.3151 - val_accuracy: 0.9151\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x18e812d10>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_model.fit(x_trn, yoh_trn, batch_size=512, epochs=10, validation_data=(x_val, yoh_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "preds = linear_model.predict(x_val, 4096)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.26923252e-05, 2.75246362e-06, 6.45465025e-06, 6.76466757e-03,\n",
       "        4.51489905e-04, 5.15809690e-04, 1.29256905e-05, 9.85740840e-01,\n",
       "        2.14161561e-03, 4.32076445e-03],\n",
       "       [1.29225271e-04, 2.49533082e-06, 1.24960832e-04, 9.97798860e-01,\n",
       "        3.06820903e-06, 1.63070287e-03, 2.67268479e-05, 7.09658366e-07,\n",
       "        2.36515349e-04, 4.68056423e-05],\n",
       "       [2.19915668e-03, 1.48081884e-03, 2.33716215e-03, 2.49240212e-02,\n",
       "        3.25820845e-04, 5.03865778e-02, 6.90515953e-05, 1.43472294e-04,\n",
       "        9.09490168e-01, 8.64378549e-03]], dtype=float32)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 3, 8])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_preds = np.argmax(preds, axis=1); num_preds[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x900 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plots(x_val[:9].reshape(-1, 28, 28), num_preds[:9])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A neural network\n",
    "\n",
    "A neural network consists of several layers, connected by matrix multiplications. Layers between the input and output layer are called hidden layers. The activations in these layers are passed through a non-linear activation function.\n",
    "\n",
    "Neural networks can approximate any non-linear function: http://neuralnetworksanddeeplearning.com/chap4.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "neural_net = Sequential([\n",
    "    Dense(512, input_shape=(784,), activation='relu'),\n",
    "    Dense(10, activation='softmax'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "neural_net.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense_1 (Dense)             (None, 512)               401920    \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 10)                5130      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 407,050\n",
      "Trainable params: 407,050\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "neural_net.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "94/94 [==============================] - 1s 7ms/step - loss: 0.4618 - accuracy: 0.8715 - val_loss: 0.2334 - val_accuracy: 0.9350\n",
      "Epoch 2/10\n",
      "94/94 [==============================] - 1s 7ms/step - loss: 0.1983 - accuracy: 0.9450 - val_loss: 0.1732 - val_accuracy: 0.9509\n",
      "Epoch 3/10\n",
      "94/94 [==============================] - 1s 7ms/step - loss: 0.1421 - accuracy: 0.9604 - val_loss: 0.1363 - val_accuracy: 0.9606\n",
      "Epoch 4/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.1099 - accuracy: 0.9700 - val_loss: 0.1165 - val_accuracy: 0.9672\n",
      "Epoch 5/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.0876 - accuracy: 0.9762 - val_loss: 0.1028 - val_accuracy: 0.9700\n",
      "Epoch 6/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.0717 - accuracy: 0.9808 - val_loss: 0.0958 - val_accuracy: 0.9712\n",
      "Epoch 7/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.0597 - accuracy: 0.9841 - val_loss: 0.0874 - val_accuracy: 0.9759\n",
      "Epoch 8/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.0495 - accuracy: 0.9873 - val_loss: 0.0834 - val_accuracy: 0.9757\n",
      "Epoch 9/10\n",
      "94/94 [==============================] - 1s 7ms/step - loss: 0.0423 - accuracy: 0.9891 - val_loss: 0.0770 - val_accuracy: 0.9774\n",
      "Epoch 10/10\n",
      "94/94 [==============================] - 1s 6ms/step - loss: 0.0355 - accuracy: 0.9914 - val_loss: 0.0791 - val_accuracy: 0.9769\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x18e4788e0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neural_net.fit(x_trn, yoh_trn, batch_size=512, epochs=10, validation_data=(x_val, yoh_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep neural networks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "deep_net = Sequential([\n",
    "    Dense(512, input_shape=(784,), activation='relu'),\n",
    "    Dropout(0.3),\n",
    "    Dense(256, activation='relu'),\n",
    "    Dropout(0.3),\n",
    "    Dense(256, activation='relu'),\n",
    "    Dropout(0.3),\n",
    "    Dense(10, activation='softmax'),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "deep_net.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense_3 (Dense)             (None, 512)               401920    \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 512)               0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 256)               131328    \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 256)               65792     \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 10)                2570      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 601,610\n",
      "Trainable params: 601,610\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "deep_net.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "94/94 [==============================] - 1s 12ms/step - loss: 0.5593 - accuracy: 0.8275 - val_loss: 0.1793 - val_accuracy: 0.9469\n",
      "Epoch 2/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.1948 - accuracy: 0.9421 - val_loss: 0.1226 - val_accuracy: 0.9626\n",
      "Epoch 3/10\n",
      "94/94 [==============================] - 1s 12ms/step - loss: 0.1374 - accuracy: 0.9586 - val_loss: 0.1029 - val_accuracy: 0.9688\n",
      "Epoch 4/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.1038 - accuracy: 0.9691 - val_loss: 0.0904 - val_accuracy: 0.9719\n",
      "Epoch 5/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0854 - accuracy: 0.9746 - val_loss: 0.0788 - val_accuracy: 0.9764\n",
      "Epoch 6/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0744 - accuracy: 0.9774 - val_loss: 0.0786 - val_accuracy: 0.9766\n",
      "Epoch 7/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0653 - accuracy: 0.9804 - val_loss: 0.0761 - val_accuracy: 0.9772\n",
      "Epoch 8/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0512 - accuracy: 0.9839 - val_loss: 0.0743 - val_accuracy: 0.9782\n",
      "Epoch 9/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0503 - accuracy: 0.9836 - val_loss: 0.0744 - val_accuracy: 0.9797\n",
      "Epoch 10/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0458 - accuracy: 0.9854 - val_loss: 0.0756 - val_accuracy: 0.9801\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x18ec80910>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deep_net.fit(x_trn, yoh_trn, batch_size=512, epochs=10, validation_data=(x_val, yoh_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0316 - accuracy: 0.9900 - val_loss: 0.0670 - val_accuracy: 0.9825\n",
      "Epoch 2/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0255 - accuracy: 0.9922 - val_loss: 0.0656 - val_accuracy: 0.9834\n",
      "Epoch 3/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0231 - accuracy: 0.9926 - val_loss: 0.0660 - val_accuracy: 0.9829\n",
      "Epoch 4/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0224 - accuracy: 0.9928 - val_loss: 0.0651 - val_accuracy: 0.9836\n",
      "Epoch 5/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0212 - accuracy: 0.9933 - val_loss: 0.0664 - val_accuracy: 0.9837\n",
      "Epoch 6/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0194 - accuracy: 0.9941 - val_loss: 0.0672 - val_accuracy: 0.9839\n",
      "Epoch 7/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0182 - accuracy: 0.9945 - val_loss: 0.0670 - val_accuracy: 0.9835\n",
      "Epoch 8/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0177 - accuracy: 0.9944 - val_loss: 0.0677 - val_accuracy: 0.9833\n",
      "Epoch 9/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0170 - accuracy: 0.9948 - val_loss: 0.0671 - val_accuracy: 0.9838\n",
      "Epoch 10/10\n",
      "94/94 [==============================] - 1s 11ms/step - loss: 0.0163 - accuracy: 0.9950 - val_loss: 0.0671 - val_accuracy: 0.9838\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x18ed60a60>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deep_net.optimizer.lr=1e-4\n",
    "deep_net.fit(x_trn, yoh_trn, batch_size=512, epochs=10, validation_data=(x_val, yoh_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convolutions\n",
    "\n",
    "To take advantage of the spatial information in images we can use convolutions rather than fully connected layers.\n",
    "\n",
    "http://setosa.io/ev/image-kernels/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv_net = Sequential([\n",
    "    Conv2D(32, kernel_size=5, strides=2, activation='relu', padding='same', input_shape=(28, 28, 1)),\n",
    "    Conv2D(64, kernel_size=3, strides=2, activation='relu', padding='same'),\n",
    "    Conv2D(128, kernel_size=3, strides=2, activation='relu', padding='same'),\n",
    "    Conv2D(10, kernel_size=3, strides=2, padding='same'),\n",
    "    GlobalAveragePooling2D(),\n",
    "    Activation('softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 14, 14, 32)        832       \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 7, 7, 64)          18496     \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 4, 4, 128)         73856     \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 2, 2, 10)          11530     \n",
      "                                                                 \n",
      " global_average_pooling2d (G  (None, 10)               0         \n",
      " lobalAveragePooling2D)                                          \n",
      "                                                                 \n",
      " activation (Activation)     (None, 10)                0         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 104,714\n",
      "Trainable params: 104,714\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "conv_net.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv_net.compile('adam', 'categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "94/94 [==============================] - 5s 46ms/step - loss: 0.7986 - accuracy: 0.7574 - val_loss: 0.3172 - val_accuracy: 0.9059\n",
      "Epoch 2/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.2577 - accuracy: 0.9236 - val_loss: 0.1987 - val_accuracy: 0.9430\n",
      "Epoch 3/20\n",
      "94/94 [==============================] - 4s 43ms/step - loss: 0.1730 - accuracy: 0.9486 - val_loss: 0.1392 - val_accuracy: 0.9598\n",
      "Epoch 4/20\n",
      "94/94 [==============================] - 4s 43ms/step - loss: 0.1245 - accuracy: 0.9625 - val_loss: 0.1126 - val_accuracy: 0.9682\n",
      "Epoch 5/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.1013 - accuracy: 0.9691 - val_loss: 0.0932 - val_accuracy: 0.9741\n",
      "Epoch 6/20\n",
      "94/94 [==============================] - 4s 43ms/step - loss: 0.0836 - accuracy: 0.9743 - val_loss: 0.0908 - val_accuracy: 0.9747\n",
      "Epoch 7/20\n",
      "94/94 [==============================] - 4s 43ms/step - loss: 0.0705 - accuracy: 0.9784 - val_loss: 0.0763 - val_accuracy: 0.9771\n",
      "Epoch 8/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.0620 - accuracy: 0.9814 - val_loss: 0.0705 - val_accuracy: 0.9796\n",
      "Epoch 9/20\n",
      "94/94 [==============================] - 4s 46ms/step - loss: 0.0568 - accuracy: 0.9826 - val_loss: 0.0716 - val_accuracy: 0.9790\n",
      "Epoch 10/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.0502 - accuracy: 0.9847 - val_loss: 0.0719 - val_accuracy: 0.9780\n",
      "Epoch 11/20\n",
      "94/94 [==============================] - 4s 43ms/step - loss: 0.0494 - accuracy: 0.9841 - val_loss: 0.0645 - val_accuracy: 0.9812\n",
      "Epoch 12/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.0423 - accuracy: 0.9870 - val_loss: 0.0644 - val_accuracy: 0.9832\n",
      "Epoch 13/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.0393 - accuracy: 0.9884 - val_loss: 0.0608 - val_accuracy: 0.9815\n",
      "Epoch 14/20\n",
      "94/94 [==============================] - 4s 44ms/step - loss: 0.0350 - accuracy: 0.9889 - val_loss: 0.0564 - val_accuracy: 0.9837\n",
      "Epoch 15/20\n",
      "94/94 [==============================] - 4s 45ms/step - loss: 0.0308 - accuracy: 0.9906 - val_loss: 0.0610 - val_accuracy: 0.9826\n",
      "Epoch 16/20\n",
      "51/94 [===============>..............] - ETA: 1s - loss: 0.0277 - accuracy: 0.9917"
     ]
    }
   ],
   "source": [
    "conv_net.fit(x_trn.reshape(-1, 28, 28, 1), yoh_trn, batch_size=512, epochs=20, \n",
    "             validation_data=(x_val.reshape(-1, 28, 28, 1), yoh_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## End"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "keras",
   "language": "python",
   "name": "keras"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": true,
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
